#include <iostream>  // Для виводу в консоль
#include <cmath>     // Для fabs()
#include <mpi.h>     // Для роботи з MPI


// Функція, яку інтегруємо: f(x) = x^2
double f(double x) {
    return x * x;
}


// Обчислення локальної частини інтегралу для одного процесу
double local_rectangle(double local_a, int local_n, double h) {
    double sum = 0.0;

    for (int i = 0; i < local_n; ++i) {
        double x = local_a + i * h;  // Координата лівого краю прямокутника
        sum += f(x);                 // Додавання площі прямокутника до локальної суми
    }

    return h * sum;  // Локальне значення інтегралу
}


int main(int argc, char* argv[]) {
    int n = 10000000;      // Кількість прямокутників (точність)
    double a = 0.0, b = 1.0; // Межі інтегрування [0;1]
    double h = (b - a) / n; // Крок інтегрування
    double true_value = 1.0 / 3.0; // Аналітичне значення інтегралу

    MPI_Init(&argc, &argv);  // Ініціалізація MPI
    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank); // Отримання номера поточного процесу (rank)
    MPI_Comm_size(MPI_COMM_WORLD, &size); // Отримання загальної кількості процесів (size)

    int local_n = n / size;                       // Кількість прямокутників для кожного процесу
    double local_a = a + rank * local_n * h;      // Початок ділянки для поточного процесу

    MPI_Barrier(MPI_COMM_WORLD);  // Синхронізація процесів перед заміром часу
    double start_time = MPI_Wtime(); // Початок заміру часу

    double local_result = local_rectangle(local_a, local_n, h); // Обчислення локального інтегралу
    double global_result = 0.0;  // Змінна для зберігання загального результату (на процесі 0)

    // Збирання результатів з усіх процесів у процес 0 (додавання результатів)
    MPI_Reduce(&local_result, &global_result, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);

    double end_time = MPI_Wtime(); // Кінець заміру часу

    if (rank == 0) {
        double abs_error = fabs(true_value - global_result); // Абсолютна похибка

        // Вивід результатів (на процесі 0)
        std::cout << "=== MPI ===\n";
        std::cout << "Processes: " << size << "\n";
        std::cout << "n = " << n << "\n";
        std::cout << "Result: " << global_result << "\n";
        std::cout << "True Value: " << true_value << "\n";
        std::cout << "Absolute Error: " << abs_error << "\n";
        std::cout << "Execution Time: " << (end_time - start_time) << " sec\n";
    }

    MPI_Finalize();  // Завершення роботи MPI
    return 0;
}
