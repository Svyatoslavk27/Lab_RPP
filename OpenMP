#include <iostream>  // Для виводу в консоль
#include <cmath>     // Для fabs()
#include <omp.h>     // Для OpenMP та omp_get_wtime()


// Функція, яку інтегруємо: f(x) = x^2
double f(double x) {
    return x * x;
}


// Обчислення інтегралу методом прямокутників (паралельно за допомогою OpenMP)
double rectangle_integral_openmp(double a, double b, int n) {
    double h = (b - a) / n;  // Крок інтегрування
    double sum = 0.0;        // Змінна для накопичення суми

    // Паралельне виконання циклу з редукцією (підсумовування результатів з потоків)
#pragma omp parallel for reduction(+:sum)
    for (int i = 0; i < n; ++i) {
        double x = a + i * h;  // Координата лівого краю прямокутника
        sum += f(x);           // Додавання площі прямокутника до локальної суми
    }

    return h * sum;  // Остаточне значення інтегралу
}


int main() {
    int n = 10000000;      // Кількість прямокутників (точність)
    double a = 0.0, b = 1.0; // Межі інтегрування [0;1]
    double true_value = 1.0 / 3.0; // Аналітичне значення інтегралу

    std::cout << "=== OPENMP ===\n";
    std::cout << "n = " << n << "\n";

    double start_time = omp_get_wtime();              // Початок заміру часу
    double result = rectangle_integral_openmp(a, b, n); // Обчислення інтегралу паралельно
    double end_time = omp_get_wtime();                // Кінець заміру часу

    double abs_error = fabs(true_value - result);     // Абсолютна похибка

    // Вивід результатів
    std::cout << "Result: " << result << "\n";
    std::cout << "True Value: " << true_value << "\n";
    std::cout << "Absolute Error: " << abs_error << "\n";
    std::cout << "Execution Time: " << (end_time - start_time) << " sec\n";

    return 0;
}
